// Generated by CoffeeScript 1.6.3
(function() {
  var Cloud, Entity, Game, Player, Screen, Sprite, World, delta, fps, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  delta = 0;

  fps = 0;

  Sprite = (function() {
    var height, sprite, width, x, y;

    sprite = null;

    width = 16;

    height = 16;

    x = 40;

    y = 50;

    function Sprite(context, sprite, x, y) {
      this.context = context;
      this.sprite = sprite;
      this.x = x;
      this.y = y;
      this.draw = __bind(this.draw, this);
    }

    Sprite.prototype.draw = function() {
      var image,
        _this = this;
      image = new Image();
      image.onload = function() {
        return _this.context.drawImage(image, _this.x, _this.y);
      };
      return image.src = this.sprite;
    };

    return Sprite;

  })();

  Cloud = (function(_super) {
    __extends(Cloud, _super);

    function Cloud() {
      _ref = Cloud.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Cloud.prototype.update = function() {};

    return Cloud;

  })(Sprite);

  Entity = (function() {
    var x, y;

    function Entity() {}

    x = 0;

    y = 0;

    return Entity;

  })();

  Player = (function(_super) {
    var name;

    __extends(Player, _super);

    function Player() {
      _ref1 = Player.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    name = "Playa";

    Player.prototype.construct = function(context) {
      this.context = context;
    };

    return Player;

  })(Entity);

  Screen = (function() {
    var context, height, lastFrameTime, width;

    width = 800;

    height = 600;

    lastFrameTime = 0;

    context = null;

    function Screen(width, height, context) {
      this.width = width;
      this.height = height;
      this.context = context;
      this.drawDebug = __bind(this.drawDebug, this);
      this.drawText = __bind(this.drawText, this);
    }

    Screen.prototype.clear = function() {
      var oldColor;
      oldColor = this.context.fillStyle;
      this.context.fillStyle = '#87CEEB';
      this.context.beginPath();
      this.context.rect(0, 0, this.width, this.height);
      this.context.closePath();
      this.context.fill();
      return this.context.fillStyle = oldColor;
    };

    Screen.prototype.update = function() {
      this.clear();
      this.drawDebug();
      if (!lastFrameTime) {
        lastFrameTime = new Date().getTime();
        fps = 0;
        return;
      }
      delta = (new Date().getTime() - lastFrameTime) / 1000;
      lastFrameTime = new Date().getTime();
      return fps = 1 / delta;
    };

    Screen.prototype.drawText = function(text, x, y, font) {
      if (font == null) {
        font = '10px Arial';
      }
      this.context.font = font;
      return this.context.fillText(text, x, y);
    };

    Screen.prototype.drawDebug = function() {
      this.context.fillStyle = 'rgba(0, 0, 0, 0.1)';
      this.context.beginPath();
      this.context.rect(0, 0, 160, 40);
      this.context.closePath();
      this.context.fill();
      this.context.fillStyle = '#000000';
      this.drawText("fps: " + fps, 10, 10);
      return this.drawText("delta: " + delta, 10, 20);
    };

    return Screen;

  })();

  World = (function() {
    var clouds, context;

    context = null;

    clouds = [];

    function World(context) {
      var cx, cy, i, _i;
      this.context = context;
      this.update = __bind(this.update, this);
      for (i = _i = 1; _i <= 5; i = ++_i) {
        cx = Math.random() * 800;
        cy = Math.random() * 100;
        clouds.push(new Cloud(this.context, 'assets/images/cloud.png', cx, cy));
      }
    }

    World.prototype.update = function() {
      var cloud, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = clouds.length; _i < _len; _i++) {
        cloud = clouds[_i];
        log('a');
        cloud.update();
        _results.push(cloud.draw());
      }
      return _results;
    };

    return World;

  })();

  Game = (function() {
    var canvas, context, entities, height, screen, width, world;

    function Game() {}

    context = null;

    canvas = null;

    entities = [];

    screen = null;

    world = null;

    width = 800;

    height = 600;

    Game.prototype.init = function() {
      this.canvas = document.getElementById('canvas');
      this.context = this.canvas.getContext('2d');
      this.screen = new Screen(800, 600, this.context);
      return this.world = new World(this.context);
    };

    Game.prototype.update = function() {
      var msg;
      this.screen.update();
      this.world.update();
      msg = "Stuff! And it's running at " + (fps.toFixed(2)) + "fps!";
      this.screen.drawText(msg, width / 2 - (msg.length * 8), 100, "18px Arial");
      return this.screen.drawText("A bit flickering, but screw it. I'll fix it later", width / 2, 200);
    };

    return Game;

  })();

  $(function() {
    var game;
    game = new Game(null);
    game.init();
    return setInterval(function() {
      return game.update();
    }, 30);
  });

}).call(this);
